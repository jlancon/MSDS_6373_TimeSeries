"results/2012/2012cucb10m-m.htm")
# Recreate urls for Men's race results
urls = paste(ubase, menURLs, sep = "")
menTables = lapply(urls, extractResTable)
names(menTables) = 1999:2012
typeof(menTables[[2]])
typeof(menTables[2])
typeof(menTables)
sapply(menTables, length)
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
}
else {
preNode = getNodeSet(doc, "//pre")
txt = xmlValue(preNode[[1]])
}
els = strsplit(txt, "\r\n")[[1]]
return(els)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000 or year == 2009) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000 || year == 2009) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
}
else {
preNode = getNodeSet(doc, "//pre")
txt = xmlValue(preNode[[1]])
}
els = strsplit(txt, "\r\n")[[1]]
return(els)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
url
0
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
doctmp = htmlParse("http://www.cherryblossom.org/results/1999/cb99m.html")
ffx = getNodeSet(doctmp, "//font")
ffx
ffx = getNodeSet(doctmp, "//PRE")
ffx = getNodeSet(doctmp, "/PRE")
ffx = getNodeSet(doctmp, "<PRE>")
ffx = getNodeSet(doctmp, "//font")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[3]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
ffx = getNodeSet(doctmp, "//td")
ffx = getNodeSet(doctmp, "//br")
ffx = getNodeSet(doctmp, "//td")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//td")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
menTables[1]
ffx = getNodeSet(doctmp, "//body")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
0
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
install.packages('IRkernel')
gen.arma.wge(1000)
library(tswge)
gen.arma.wge(1000)
parzen.wge(gen.arma.wge(1000))
factor.wge(phi=c(0.1516, 0.0769, 0.0016, -0.0095, 0.0542, 0.1117, 0.5683))
library(tswge)
factor.wge(phi=c(0.1516, 0.0769, 0.0016, -0.0095, 0.0542, 0.1117, 0.5683))
plotts.true.wge(phi = c(0.4295, 0.1769, 0.0358, 0.1454))
plotts.true.wge(phi = c(0.4295, 0.1769, 0.0358, 0.1454))
factor.wge(phi=c(0.1516, 0.0769, 0.0016, -0.0095, 0.0542, 0.1117, 0.5683))
factor.wge(phi=c(0.4295, 0.1769, 0.0358, 0.1454))
plotts.true.wge(phi = c(0.1529, 0.0988, 0.0059, -0.0075, 0.0538, 0.1118, 0.5717, 0.0034, -0.0382 ))
plotts.true.wge(phi = c(0.4295, 0.1769, 0.0358, 0.1454))
plotts.true.wge(phi = c(0.1529, 0.0988, 0.0059, -0.0075, 0.0538, 0.1118, 0.5717, 0.0034, -0.0382 ))
plotts.true.wge(phi = c(0.4295, 0.1769, 0.0358, 0.1454))
factor.wge(phi=c(0.4295, 0.1769, 0.0358, 0.1454))
plotts.true.wge(phi = c(0.1516, 0.0769, 0.0016, -0.0095, 0.0542, 0.1117, 0.5683))
factor.wge(phi=c(.15, -.4))
factor.wge(phi=c(-.15, -.4))
factor.wge(phi=c(-.9))
plotts.true.wge(phi = c(-.9))
plotts.true.wge(phi = c(-.9,.67,-.299))
factor.wge(phi=c(-.9,.67,-.2994))
factor.wge(phi=c(-.9,.67,-.2994))
factor.wge(phi=c(-.15, -.4))
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
# Setting the current working directory to the current file location
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
psi.weights.wge(theta=.8,lag.max=5)
psi.weights.wge(phi=.8,lag.max=5)
psi.weights.wge(phi=c(1.2,-.6),theta=c(.5),lag.max=5)
psi.weights.wge(phi=c(1.95,-1.9),lag.max=5)
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
# Setting the current working directory to the current file location
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
# Setting the current working directory to the current file location
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
# Read a txt file
my_data <-read.delim(file.choose(),
sep =";", header = TRUE, dec =".",stringsAsFactors=FALSE)
# Create a new variable 'datetime', combining Date and Time variables
my_data$datetime <- as.POSIXct(paste(my_data$Date, my_data$Time), format="%d/%m/%Y %H:%M:%S")
# Reducing dataset to variables we will use in the study
df <- my_data[,c('datetime','Global_active_power')]
# Removing data with missing observations
df<-df[!(df$Global_active_power=="?"),] # 25979 missing observations
# Converting power consumption to numeric variable
df$Global_active_power <- as.numeric(df$Global_active_power)
summary(df)
aic5.wge(df$Global_active_power)
#Walmart Store 9 Item 50 Filtering / spectral analysis / AR(3)
# Read in the data
Walmart = read.csv(file.choose(),header = TRUE)
# Load the Data
Stor9Item50 = Walmart %>% filter(item == 50 & stor
#Look at and Visualize the data
head(Stor9Item50)
head(Stor9Item50)
Stor9Item50 = Walmart %>% filter(item == 50 & store == 9) #1826 obs 5 variables
library(dplyr)
library(tidyr)
library(stats)
# Load the Data
Stor9Item50 = Walmart %>% filter(item == 50 & store == 9) #1826 obs 5 variables
#Look at and Visualize the data
head(Stor9Item50)
plotts.sample.wge(Stor9Item50$sales)
aic5.wge(Stor9Item50$sales)
factor.wge(phi=c(0.3, 0.9, 0.1, -0.8075))
factor.wge(phi=c(-0.1,-0.82,0.16))
factor.wge(phi=c(-0.2))
psi.weights.wge(phi=c(1.2,-.6),theta=c(.5),lag.max=5)
plotts.true.wge(phi=c(-1.91, 0.70, -.25),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(-1.21, 0.70, -.25),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(-1.1, 0.30, -.25),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(-1.02, 0.30, -.25),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(-0.92, 0.30, -.25),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(-0.62, 0.30, -.25),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(-1.95,1.9),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.1, -0.5, 0.7),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.4, -0.5, 0.7),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.4, -0.5, 0.7, 1.2),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.4, -0.5, 0.7, -.8),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.4, -0.5, 0.7, -.3),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.4, -0.5, 0.7, -.3,.8),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.4, -0.5, 0.7, -.3,-.8),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.4, -0.5, 0.7, -.3,-.2),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(1.4, -0.5, 0.7, -.3,-.2),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(-1.4, -0.5, 0.7, -.3,-.2),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(-.4, -0.5, 0.7, -.3,-.2),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.4, -0.5, 0.7, -.3,-.2),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.9, -0.5, 0.7, -.3,-.2),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.9, -0.2, 0.7, -.3,-.2),theta=c(0.33, 1.4))
plotts.true.wge(phi=c(0.90, -0.20, 0.70, -0.30,-.2),theta=c(0.33, 1.4,-0.4))
plotts.true.wge(phi=c(0.90, -0.20, 0.70, -0.30,-.2),theta=c(0.53, 1.4))
plotts.true.wge(phi=c(0.90, -0.20, 0.70, -0.30,-.2),theta=c(-0.53, 1.4))
factor.wge(phi=c(0.90, -0.20, 0.70, -0.30,-.2))
factor.wge(phi=c(-0.53, 1.4))
factor.wge(phi=c(-0.53, 1.0))
factor.wge(phi=c(-0.53, 0.78))
factor.wge(phi=c(-0.53, 0.38))
factor.wge(phi=c(-0.53, 0.38, 0.6))
plotts.true.wge(phi=c(0.90, -0.20, 0.70, -0.30,-.2),theta=c(-0.53, 0.38, 0.6))
factor.wge(phi=c(0.90, -0.20, 0.70, -0.30,-.2))
factor.wge(phi=c(-0.53, 0.38, 0.6))
SWA = read.csv(file.choose(),header=TRUE)
View(SWA)
plotts.wge(SWA$arr_cancelled)
plotts.sample.wge(SWA$arr_cancelled)
aic5.wge(SWA$arr_cancelled)
