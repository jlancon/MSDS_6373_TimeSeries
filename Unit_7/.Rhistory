par(mfrow=c(1,1))
aic5.wge(SecondDif)
# Concept Checks 6.6.6
# (1 + 0.5B - 0.2B^2 + 1B^4 - 0.5B^5 + 0.2B^6)X_t = (1-0.92B)a_t
factor.wge(c(-0.5,0.2,0,-1,0.5,-0.2))
# Concept Checks 6.6.6
# (1 + 0.5B - 0.2B^2 - 1B^4 - 0.5B^5 + 0.2B^6)X_t = (1-0.92B)a_t
factor.wge(c(-0.5,0.2,0,1,0.5,-0.2))
factor.wge(c(0,0.0,1))
factor.wge(c(0,0.0,0,1))
factor.wge(c(0,0,0,1))
factor.wge(c(.76,0,0,.94,-.75))
x5=gen.arima.wge(n=500, phi=c(0.76,0,0,0.94,-.75))
x5=gen.arma.wge(n=500, phi=c(0.76,0,0,0.94,-.75))
plotts.sample.wge(x5)
factor.wge(c(0.76,0,0,0.94,-.75))
factor.wge(c(0,0,0,1))
ll_99 = (C_fore$f-c_fore$ll)*(z/1.96)
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
data("fig6.2nf")
F62 = fig6.2nf
p = 2 #order of ARMA model
c_fore = fore.aruma.wge(F62, d = 0, s = 0, phi = c(1.2,-0.6),theta = c(0.5),
n.ahead = 20,lastn = FALSE, limits = FALSE)
sigma_aHat = sqrt((sum((c_fore$resid)^2))/(length(F62)-p))
print(paste0('sigma_aHat =',sigma_aHat))
z = 2.58
ll_99 = (C_fore$f-c_fore$ll)*(z/1.96)
c_fore = fore.aruma.wge(F62, d = 0, s = 0, phi = c(1.2,-0.6),theta = c(0.5),
n.ahead = 20,lastn = FALSE, limits = FALSE)
c_fore
z = 2.58
ll_99 = (c_fore$f-c_fore$ll)*(z/1.96)
ll_99
c_fore$ll_99 = c_fore$f-abs((c_fore$f-c_fore$ll)*(z/1.96))
z = 2.58
half_width = abs((c_fore$f-c_fore$ll)*(z/1.96))
c_fore$ll_99 = c_fore$f-half_width
c_fore$ul_99 = c_fore$f+half_width
z = 2.58 # Z for 99%
x_6.2 = fore.aruma.wge(fig6.2nf, d = 0, s = 0, phi = c(1.2,-0.6),theta = c(0.5),
n.ahead = 20,lastn = FALSE, limits = FALSE)
half_width = abs((x_6.2$f-x_6.2$ll)*(z/1.96))
x_6.2$ll_99 = x_6.2$f-half_width # Will add the new ul & ll to original data set
x_6.2$ul_99 = x_6.2$f+half_width
View(x_6.2)
View(x_6.2)
View(c_fore)
View(c_fore)
fig6.2nf
plot(fig6.2nf,y1,type="l",col="red")
plot(fig6.2nf,type="l",col="red")
R.Version()
?tswge()
?tswge
?`tswge-package`
ts <- c(76,70,66,60,70,72,76,80)
mean(ts)
n = length(ts)
gamma0 = var(ts)*((n-1)/n)
gamma0
rhos <- acf(ts,plot = FALSE,lag.max = n-1)
ts <- c(76,70,66,60,70,72,76,80)
mean(ts)
n = length(ts)
gamma0 = var(ts)*((n-1)/n)
gamma0
# [1] 34.9375
rhos <- acf(ts,plot = FALSE,lag.max = n-1)
rhos
# Autocorrelations of series 'ts', by lag
#
# 0      1      2      3      4      5      6      7
# 1.000  0.422 -0.043 -0.430 -0.466 -0.173  0.042  0.149
rhos
gamma_hat[]
length(ts)
for (i in length(ts)){
gamma_hat[k] = (((ts[i]-mean(ts))^2)*((ts[i+k]-mean(ts))^2))/length(ts)
print(paste("The year is", i))
}
k=1
gamma_hat[]
for (i in length(ts)){
gamma_hat[k] = (((ts[i]-mean(ts))^2)*((ts[i+k]-mean(ts))^2))/length(ts)
print(paste("The year is", i))
}
k=1
gamma_hat()
for (i in length(ts)){
gamma_hat[k] = (((ts[i]-mean(ts))^2)*((ts[i+k]-mean(ts))^2))/length(ts)
print(paste("The year is", i))
}
for (i in length(ts)){
gamma_hat[k] = (((ts[i]-mean(ts))^2)*((ts[i+k]-mean(ts))^2))/length(ts)
print(paste("The year is", i))
}
for (i in length(ts)){
gamma_hat = (((ts[i]-mean(ts))^2)*((ts[i+k]-mean(ts))^2))/length(ts)
print(paste("The year is", i))
}
gamma_hat
ts[i]
mean(ts)
(ts[i]-mean(ts))^2
ts[i]-mean(ts)
(length(ts)-1)
(length(ts)-k)
k=1
gamma_hat()
for (i in (length(ts)-k)){
gamma_hat = (((ts[i]-mean(ts))^2)*((ts[i+k]-mean(ts))^2))/length(ts)
print(gamma_hat)
}
k=1
gamma_hat()
for (i in (length(ts)-k)){
gamma_hat[i] = (((ts[i]-mean(ts))^2)*((ts[i+k]-mean(ts))^2))
print(gamma_hat[i])
}
k=1
gamma_hat()
for (i in (length(ts)-k)){
gamma_hat[i] = ((ts[i]-mean(ts))^2)
print(gamma_hat[i])
}
k=1
gamma_hat()
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))^2)
print(gamma_hat[i])
}
k=1
gamma_hat()
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
gamma_hat2()
gamma_hat2[]
gamma_hat2[1] = sum(gamma_hat)/length(ts)
gamma_hat2 = sum(gamma_hat)/length(ts)
k=1
gamma_hat()
for (k in seq(3)){
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
gamma_hat2
k=1
gamma_hat()
for (k in seq(7)){
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
#print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
gamma_hat2
k=1
gamma_hat()
for (k in seq(n)){
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
#print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
k=1
gamma_hat()
for (k in seq(9)){
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
#print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
max_lag =n-1
gamma_hat2
plotts.sample.wge(ts)
library(tswge)
plotts.sample.wge(ts)
ts <- c(76,70,66,60,70,72,76,80)
mean(ts)
n = length(ts)
gamma0 = var(ts)*((n-1)/n)
gamma0
max_lag
max_lag =n-1
max_lag =n-1
#gamma_hat()
for (k in seq(max_lag)){
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
#print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
max_lag
for (k in seq(max_lag)){
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
#print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
gamma_hat <- rep(0, max_lag)
gamma_hat
for (k in seq(max_lag)){
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
#print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
gamma_hat2 <- rep(0, max_lag)
for (k in seq(max_lag)){
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
#print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
gamma_hat2
for (k in seq(2)){
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
gamma_hat
for (k in seq(2)){
gamma_hat <- rep(0, max_lag)
for (i in seq((length(ts)-k))){
gamma_hat[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
print(gamma_hat[i])
}
gamma_hat2[k] = sum(gamma_hat)/length(ts)
}
gamma_hat2
max_lag =n-1
gamma_hat <- rep(0, max_lag)
for (k in seq(2)){
temp <- rep(0, max_lag)
for (i in seq((length(ts)-k))){
temp[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
print(temp[i])
}
gamma_hat[k] = sum(temp)/length(ts)
}
gamma_hat
max_lag =n-1
gamma_hat <- rep(0, max_lag)
for (k in seq(max_lag)){
temp <- rep(0, max_lag)
for (i in seq((length(ts)-k))){
temp[i] = ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
print(temp[i])
}
gamma_hat[k] = sum(temp)/length(ts)
}
gamma_hat
ts <- c(76,70,66,60,70,72,76,80)
mean(ts)
n = length(ts)
gamma0 = var(ts)*((n-1)/n)
gamma0
nlag=n-1
gamma_hat <- rep(0, nlag)
for (k in 1:seq(nlag)){
sum = 0
for (i in seq((length(ts)-k))){
sum = sum + ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
print(sum)
}
gamma_hat[k] = sum/length(ts)
}
gamma_hat
n = length(ts)
nlag=n-1
gamma_hat <- rep(0, nlag)
for (k in 1:seq(nlag)){
sum = 0
for (i in seq((length(ts)-k))){
sum = sum + ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
print(sum)
}
gamma_hat[k] = sum/length(ts)
}
nlag=n-1
gamma_hat <- rep(0, nlag)
for (k in seq(nlag)){
sum = 0
for (i in seq((length(ts)-k))){
sum = sum + ((ts[i]-mean(ts))*(ts[i+k]-mean(ts)))
print(sum)
}
gamma_hat[k] = sum/length(ts)
}
gamma_hat
#----For Live Session 7.11.2 ----
# (1-0.9B)(1-0.8B)X_t = a_t
# Find the first 5 psi weights for the model
psi.weights.wge(phi = c(1.7,-0.72),lag.max = 5)
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
# Setting the current working directory to the current file location
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
#----For Live Session 7.11.2 ----
# (1-0.9B)(1-0.8B)X_t = a_t
# Find the first 5 psi weights for the model
psi.weights.wge(phi = c(1.7,-0.72),lag.max = 5)
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
# Setting the current working directory to the current file location
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
#----For Live Session 7.11.2 ----
# (1-0.9B)(1-0.8B)X_t = a_t
# Find the first 5 psi weights for the model
psi.weights.wge(phi = c(1.7,-0.72),lag.max = 5)
# Find the 95% probability interval for the l=3, forecast Xhat(3)
LiveSession = c(5,8,9,8,7,6,4,3)
LiveSession_Predict = fore.arma.wge(LiveSession,phi = c(1.7,-0.72),
n.ahead = 8,lastn = FALSE,plot = TRUE,
limits = TRUE)
sigma_aHat = sqrt((sum((LiveSession_Predict$resid)^2))/6)
print(paste0('sigma_aHat =',sigma_aHat))
b_cast = backcast.wge(LiveSession, phi =c(1.7,-0.72),
theta = 0,n.back = 8)
factor.wge(phi = c(0,0,0,1))
?psi.weights.wge()
# Find the first 5 psi weights for the model
psi.weights.wge(phi = c(-1.1,-1.78,-0.88,-0.64),theta = c(0.2,-0.9),lag.max = 5)
# Find the first 5 psi weights for the model
psi.weights.wge(phi = c(-1.1,-1.78,-0.88,-0.64),theta = c(0.2,-0.9),lag.max = 5)
Pro61 = c(40,30.5,49.8,38.3,29.3,48.7,39.2,31.7,46.1,42.4)
Pro61 = c(40,30.5,49.8,38.3,29.3,48.7,39.2,31.7,46.1,42.4)
Pro61_Predict = fore.arma.wge(Pro61,phi = c(-1.1,-1.78,-0.88,-0.64),
theta = c(0.2,-0.9),n.ahead = 4,lastn = FALSE,plot = TRUE,
limits = TRUE)
Pro61_Predict
sigma_aHat = sqrt((sum((Pro61_Predict$resid)^2))/(length(Pro61)-p))
p = 4
q = 2
sigma_aHat = sqrt((sum((Pro61_Predict$resid)^2))/(length(Pro61)-p))
sigma_aHat
sigma_aHat = sqrt((sum((LiveSession_Predict$resid)^2))/6)
sigma_aHat
p = c(-1.1,-1.78,-0.88,-0.64)
q = c(0.2,-0.9)
Pro61 = c(40,30.5,49.8,38.3,29.3,48.7,39.2,31.7,46.1,42.4)
Pro61_Predict = fore.arma.wge(Pro61,phi = p,
theta = q,n.ahead = 4,lastn = FALSE,plot = TRUE,
limits = TRUE)
sigma_aHat = sqrt((sum((Pro61_Predict$resid)^2))/(length(Pro61)-p))
sigma_aHat
length(Pro61)
sigma_aHat = sqrt((sum((Pro61_Predict$resid)^2))/(length(Pro61)-length(p)))
sigma_aHat
sigma_aHat = sqrt((sum((Pro61_Predict$resid)^2))/(n-orderp))
Pro61 = c(40,30.5,49.8,38.3,29.3,48.7,39.2,31.7,46.1,42.4)
p = c(-1.1,-1.78,-0.88,-0.64)
q = c(0.2,-0.9)
n = length(Pro61)
orderp = length(p)
orderq = length(q)
sigma_aHat = sqrt((sum((Pro61_Predict$resid)^2))/(n-orderp))
sigma_aHat
for (i in orderp){
print(p[i])
}
for (i in range(1:orderp)){
print(p[i])
}
range(1:orderp)
for (i in seq(1,orderp)){
print(p[i])
}
x[x0]
x = Prob61
Pro61 = c(40,30.5,49.8,38.3,29.3,48.7,39.2,31.7,46.1,42.4)
x[x0]
x = Prob61
x = Pro61
x[x0]
xo = 5
x[x0]
x0 = 5
x[x0]
p[k]*x[x0-1]
p = c(-1.1,-1.78,-0.88,-0.64)
p[k]*x[x0-1]
k=1
p[k]*x[x0-1]
p[k+1]*x[x0-2]
p[k+2]*x[x0-3]
p[k+2]*x[x0-3]
for (z in seq(1,orderp)){
sum = sum + (p[z]*x[orderp-z])
}
orderp-z
sum=0
for (z in seq(1,orderp)){
sum = sum + (p[z]*x[orderp-z])
}
p[z]
x[orderp-z]
sum=0
for (z in seq(1,orderp)){
sum = sum + (p[z]*x[(orderp-z)])
}
sum
(orderp-z)
sum=0
for (z in seq(1,orderp)){
sum = sum + (p[z]*x[(orderp+1-z)])
}
(p[k]*x[x0-1] + p[k+1]*x[x0-2] + p[k+2]*x[x0-3] + p[k+3]*x[x0-4])
Pro61_Predict = fore.arma.wge(Pro61,phi = p,
theta = q, n.ahead = 4,lastn = FALSE,plot = TRUE,
limits = TRUE)
Pro61_Predict
# Forecast Xhat_10(l) l=1,2,3,4 and 95% probability interval,
Pro61 = c(40,30.5,49.8,38.3,29.3,48.7,39.2,31.7,46.1,42.4)
p = c(-1.1,-1.78,-0.88,-0.64)
q = c(0.2,-0.9)
Pro61_Predict = fore.arma.wge(Pro61,phi = p,
theta = q, n.ahead = 4,lastn = FALSE,plot = TRUE,
limits = TRUE)
Pro61_Predict
sigma_aHat = sqrt((sum((Pro61_Predict$resid)^2))/(n-orderp))
print(paste0('sigma_aHat =',sigma_aHat))
mult.wge(fac1 = c(0.8),fac2 = c(1,-0.9))
mod = mult.wge(fac1 = c(0.8),fac2 = c(1,-0.9))
mod = mult.wge(fac1 = c(0.8),fac2 = c(1,-0.9))
gen.arma.wge(n=100,phi = mod$model.coef,theta = c(-0.5))
model63 = gen.arma.wge(n=100,phi = mod$model.coef,theta = c(-0.5))
fore.arma.wge(model63,phi = mod$model.coef,theta = c(-0.5),n.ahead = 10,
lastn = TRUE)
model63 = model63 + 50
fore.arma.wge(model63,phi = mod$model.coef,theta = c(-0.5),n.ahead = 10,
lastn = TRUE)
model63
model63_fore = fore.arma.wge(model63,phi = mod$model.coef,theta = c(-0.5),n.ahead = 10,
lastn = TRUE)
print(" Forecast    Lower   Upper   Actual")
for (z in seq(1,10+1)){
print(paste0(model63_fore$f[z],model63_fore$ll,model63_fore$ul,model63[(90+z)]))
}
print(" Forecast    Lower   Upper   Actual")
for (z in seq(1,(10+1))){
print(paste0(model63_fore$f[z],model63_fore$ll,model63_fore$ul,model63[(90+z)]))
}
model63_fore$f[z]
model63_fore$f[z]
model63_fore = fore.arma.wge(model63,phi = mod$model.coef,theta = c(-0.5),n.ahead = 10,
lastn = TRUE)
z=2
model63_fore$f[z]
print(" Forecast    Lower   Upper   Actual")
for (z in seq(1,(10))){
print(paste0(model63_fore$f[z],model63_fore$ll[z],model63_fore$ul[z],model63[(90+z)]))
}
print(" Forecast    Lower   Upper   Actual")
for (z in seq(1,(10))){
print(paste0(round(model63_fore$f[z],4),round(model63_fore$ll[z],4),round(model63_fore$ul[z],4),round(model63[(90+z)],4)))
}
for (z in seq(1,(10))){
if (z == 1){print(" Forecast    Lower   Upper   Actual") }
print(paste0(round(model63_fore$f[z],4),round(model63_fore$ll[z],4),round(model63_fore$ul[z],4),round(model63[(90+z)],4)))
}
for (z in seq(1,(10))){
if (z == 1){print(" Forecast    Lower   Upper   Actual") }
print(paste0(round(model63_fore$f[z],4),'   ',round(model63_fore$ll[z],4),'   ',round(model63_fore$ul[z],4),'   ',round(model63[(90+z)],4)))
}
for (z in seq(1,(10))){
if (z == 1){print(" Forecast    Lower    Upper     Actual") }
print(paste0(round(model63_fore$f[z],4),'   ',round(model63_fore$ll[z],4),'   ',round(model63_fore$ul[z],4),'   ',round(model63[(90+z)],4)))
}
model64 = gen.aruma.wge(n=100,phi = c(-0.5),s=4,d=1,sn=2)
model64 = model64 + 50
plotts.wge(model64)
model64_forward = fore.arma.wge(model64,phi = c(-0.5),n.ahead = 10,
lastn = FALSE)
model64_forward = fore.arma.wge(model64,phi = c(-0.5),n.ahead = 10,
lastn = FALSE, limits = FALSE)
model64
model64_forward = fore.arma.wge(model64,phi = c(-0.5),s=4,d=1,n.ahead = 10,
lastn = FALSE, limits = FALSE)
model64_forward = fore.aruma.wge(model64,phi = c(-0.5),s=4,d=1,n.ahead = 10,
lastn = FALSE, limits = FALSE)
model64_last = fore.aruma.wge(model64,phi = c(-0.5),s=4,d=1,n.ahead = 10,
lastn = TRUE, limits = FALSE)
for (z in seq(1,(10))){
if (z == 1){print(" Forecast    Lower    Upper     Actual") }
print(paste0(round(model64_last$f[z],4),'   ',round(model64_last$ll[z],4),'   ',round(model64_last$ul[z],4),'   ',round(model64[(90+z)],4)))
}
model64_last
model64_last = fore.aruma.wge(model64,phi = c(-0.5),s=4,d=1,n.ahead = 10,
lastn = TRUE, limits = TRUE)
model64_last = fore.aruma.wge(model64,phi = c(-0.5),s=4,d=1,n.ahead = 10,
lastn = TRUE, limits = FALSE)
