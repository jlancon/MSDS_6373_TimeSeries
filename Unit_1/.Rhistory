# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
ffx = getNodeSet(doctmp, "//td")
ffx = getNodeSet(doctmp, "//br")
ffx = getNodeSet(doctmp, "//td")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//td")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
menTables[1]
ffx = getNodeSet(doctmp, "//body")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
0
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
install.packages('IRkernel')
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
# Setting the current working directory to the current file location
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
xdf = read.csv(file.choose(),header = TRUE) #TenYearBondRate.csv
x = as.numeric(paste(xdf$Adj.Close))
x = x[!is.na(x)]
n=length(x) #n = 1509
nlag=1508 #n-1
m=mean(x) # 2.457421
v=var(x,na.rm = TRUE) # 0.350049
gamma0=var(x)*(n-1)/n # 0.3498171
aut=acf(x,lag.max=1508) #n-1
sum=0
for (k in 1:nlag) {sum=sum+(1-k/n)*aut$acf[k+1]*gamma0}
vxbar=2*sum/n+gamma0/n #note the mult of sum by 2
vxbar
MOE = 1.96*sqrt(vxbar)
LL = mean(x) - MOE
UL = mean(x) + MOE
print(paste0("Lower Limit: ",LL))
print(paste0("Upper Limit: ",UL))
TB <- read.csv(file='10_year_bond_rate_2010-2015.csv', header=TRUE, sep=",")
head(TB)
Price = TB$Adj.Close
head(Price)
par(mfrow=c(3,1))
plot(Price,type='l',xlim=c(0,length(Price)),ylim = c(min(Price),max(Price)),xlab = 'Time',col='blue')
acf(Price[1:750],plot=TRUE, ylim = c(-1,1),col="blue")
acf(Price[751:1500],plot=TRUE, ylim = c(-1,1),col="blue")
mean(Price)
ts <- c(4,6,7,5,3)
print (paste0("Mean of Timeseries: ",mean(ts))
print (paste0("Mean of Timeseries: ",mean(ts)))
n = lenght(ts)
n = length(ts)
gamma0 <- var(ts)*((n-1)/n)
print (paste0("variance gamma_hat0: ",gamma0))
rhosí¼Œ
rhos
?rhos
?rhos()
acf(ts)
acf(ts,print=FALSE)
acf(ts,plot = FALSE)
acf(ts,plot = FALSE,lag.max = n-1)
aut <- acf(ts,plot = FALSE,lag.max = n-1)
print (paste0("AutoCorrelations: ",aut))
print(aut$acf[1])
print(aut$acf[2])
nlag=n-1
sum=0
for (k in 1:nlag) {sum=sum+(1-k/n)*aut$acf[k+1]*gamma0}
vxbar=2*sum/n+gamma0/n
vxbar
gamma0 <- var(ts)*(n-1)/n
nlag=n-1
sum=0
for (k in 1:nlag) {sum=sum+(1-(k/n))*aut$acf[k+1]*gamma0}
vxbar=2*sum/n+gamma0/n
vxbar
rhos <- acf(ts,plot = FALSE,lag.max = n-1)
# Autocorrelations of series â€˜tsâ€™, by lag
#
# 0    1    2    3    4
# 1.0  0.1 -0.6 -0.2  0.2
print(rhos$acf[2])
rhos
nlag=1
sum=0
for (k in 1:nlag) {
sum=sum+(1-(k/n))*rhos$acf[k+1]*gamma0
}
vxbar=2*sum/n+gamma0/n
vxbar
nlag=1
sum=0
for (k in 1:nlag) {
sum=sum+(1-(k/n))*rhos$acf[k+1]*gamma0
}
vxbar=2*sum/n+gamma0/n
vxbar
print(paste0("Variance of Xbar: ",vxbar))
# 95% Confidence Interval for Adj.Close bond data
MOE = 1.96*sqrt(vxbar)
LL = mean(x) - MOE
UL = mean(x) + MOE
print(paste0("Lower Limit: ",LL))
print(paste0("Upper Limit: ",UL))
MOE = 1.96*sqrt(vxbar)
LL = mean(ts) - MOE
UL = mean(ts) + MOE
print(paste0("Lower Limit: ",LL)) #[1] "Lower Limit: 0.996874758365193"
print(paste0("Upper Limit: ",UL)) #[1] "Upper Limit: 3.66708254054245"
# Enterning Timeseries data
ts <- c(4,6,7,5,3)
# a) Determining Mean of timeseries
print (paste0("Mean of Timeseries: ",mean(ts)))
n = length(ts)
gamma0 <- var(ts)*(n-1)/n
print (paste0("variance gamma_hat0: ",gamma0))
rhos <- acf(ts,plot = FALSE,lag.max = n-1)
print(rhos$acf[2])
nlag=1
sum=0
for (k in 1:nlag) {
sum=sum+(1-(k/n))*rhos$acf[k+1]*gamma0
}
vxbar=2*sum/n+gamma0/n
vxbar
print(paste0("Variance of Xbar: ",vxbar))
MOE = 1.96*sqrt(vxbar)
LL = mean(ts) - MOE
UL = mean(ts) + MOE
print(paste0("Lower Limit: ",LL)) #[1] "Lower Limit:  3.66489610891137"
print(paste0("Upper Limit: ",UL)) #[1] "Upper Limit: 6.33510389108863"
nlag=2
sum=0
for (k in 1:nlag) {
sum=sum+(1-(k/n))*rhos$acf[k+1]*gamma0
}
vxbar=2*sum/n+gamma0/n
vxbar
print(paste0("Variance of Xbar: ",vxbar))
# [1] "Variance of Xbar: 0.464"
# 95% Confidence Interval for variance of dataset
MOE = 1.96*sqrt(vxbar)
LL = mean(ts) - MOE
UL = mean(ts) + MOE
print(paste0("Lower Limit: ",LL)) #[1] "Lower Limit:  3.66489610891137"
print(paste0("Upper Limit: ",UL)) #[1] "Upper Limit: 6.33510389108863"
var(ts)
xdf = read.csv(file.choose(),header = TRUE) #TenYearBondRate.csv
x = as.numeric(paste(xdf$Adj.Close))
x = x[!is.na(x)]
n=length(x) #n = 1509
nlag=1508
m=mean(x)
v=var(x,na.rm = TRUE)
gamma0=var(x)*(n-1)/n
gamma0=var(x)*(n-1)/n
aut=acf(x,lag.max=nlag)
sum2 = 0
for (k in 1:n) {sum2=sum2+(x[k]-m)^2}
v=var(x,na.rm = TRUE)
xdf = read.csv(file.choose(),header = TRUE) #TenYearBondRate.csv
x = as.numeric(paste(xdf$Adj.Close))
x = x[!is.na(x)]
n=length(x) #n = 1509
nlag=n-1 #1508
m=mean(x) # 2.33198
sum2 = 0
for (k in 1:n) {sum2=sum2+x[k]}
ac = sum2/n
sum2 = 0
for (k in 1:n) {sum2=sum2+(x[k]-mean)^2}
for (k in 1:n) {sum2=sum2+(x[k]-m)^2}
sum2 = sum2/(n-1)
v=var(x,na.rm = TRUE) # 0.24714
gamma0=var(x)*(n-1)/n
aut=acf(x,lag.max=nlag)
sum=0
for (k in 1:nlag) {sum=sum+(1-k/n)*aut$acf[k+1]*gamma0}
vxbar=2*sum/n+gamma0/n #note the mult of sum by 2
vxbar
xdf = read.csv(file.choose(),header = TRUE) #TenYearBondRate.csv
x = as.numeric(paste(xdf$Adj.Close))
x = x[!is.na(x)]
n=length(x) #n = 1509
nlag=n-1 #1508
m=mean(x) # 2.33198
v=var(x,na.rm = TRUE) # 0.24714
gamma0=var(x)*(n-1)/n # 0.24701  Multiplied by n-1 and divided by n because var is divided by n-1
# and gamma0 is divided by n
aut=acf(x,lag.max=nlag) #n-1
sum=0
for (k in 1:nlag) {sum=sum+(1-k/n)*aut$acf[k+1]*gamma0}
vxbar=2*sum/n+gamma0/n #note the mult of sum by 2
vxbar
n=length(x) #n = 1509
xdf = read.csv(file.choose(),header = TRUE) #TenYearBondRate.csv
x = as.numeric(paste(xdf$Adj.Close))
x = x[!is.na(x)]
n=length(x) #n = 1509
nlag=1508 #1508
m=mean(x) # 2.33198
v=var(x,na.rm = TRUE) # 0.24714
gamma0=var(x)*(n-1)/n # 0.24701  Multiplied by n-1 and divided by n because var is divided by n-1
# and gamma0 is divided by n
aut=acf(x,lag.max=nlag) #n-1
sum=0
for (k in 1:nlag) {sum=sum+(1-k/n)*aut$acf[k+1]*gamma0}
vxbar=2*sum/n+gamma0/n #note the mult of sum by 2
vxbar #0.00358
nlag=n-1 #1508
sum=0
for (k in 1:nlag) {
sum=sum+(1-k/n)*aut$acf[k+1]*gamma0
}
vxbar=2*sum/n+gamma0/n #note the mult of sum by 2
vxbar #0.00358
sum=0
for (k in 1:nlag) {
sum=sum+(1-k/n)*aut$acf[k+1]*gamma0
}
vxbar=2*sum/n+gamma0/n #note the mult of sum by 2
print(paste0("vxbar value: ",vxbar) #0.00358
sum=0
for (k in 1:nlag) {
sum=sum+(1-k/n)*aut$acf[k+1]*gamma0
}
vxbar=2*sum/n+gamma0/n #note the mult of sum by 2
print(paste0("vxbar value: ",vxbar)) #0.00358
xdf = read.csv(file.choose(),header = TRUE) #TenYearBondRate.csv
x = as.numeric(paste(xdf$Adj.Close))
x = x[!is.na(x)]
n=length(x) #n = 2014
nlag=n-1 #2013
m=mean(x) # 2.33198
v=var(x,na.rm = TRUE) # 0.24714
gamma0=var(x)*(n-1)/n # 0.24701  Multiplied by n-1 and divided by n because var
# is divided by n-1 and gamma0 is divided by n
aut=acf(x,lag.max=nlag) #n-1
sum=0
for (k in 1:nlag) {
sum=sum+(1-k/n)*aut$acf[k+1]*gamma0
}
vxbar=2*sum/n+gamma0/n #note the mult of sum by 2
print(paste0("vxbar value: ",vxbar)) #0.00358
aut[1]
aut[0]
aut$acf[2]
# 95% Confidence Interval for Adj.Close bond data
MOE = 1.96*sqrt(vxbar)
LL = mean(x) - MOE
UL = mean(x) + MOE
print(paste0("Lower Limit: ",LL)) #[1] "Lower Limit: 2.21469896059463"
print(paste0("Upper Limit: ",UL)) #[1] "Upper Limit: 2.44925833831302"
sum3=0
for (k in 1:nlag) {
sum3=sum3+(1-(k/n))*aut$acf[k+1]
}
vxbar3=(1+ 2*sum3)*gamma0/n #note the mult of sum by 2
print(paste0("vxbar value: ",vxbar3))
# ALternate formula for vxbar
sumAlt=0
for (k in 1:nlag) {
sumAlt=sumAlt+(1-(k/n))*aut$acf[k+1] # Follows the book formula layout
}
vxbar_Alt=(1+ 2*sumAlt)*(gamma0/n)
print(paste0("vxbar_Alt value: ",vxbar_Alt))
