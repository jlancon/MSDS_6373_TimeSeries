"results/2010/2010cucb10m-m.htm",
"results/2011/2011cucb10m-m.htm",
"results/2012/2012cucb10m-m.htm")
urls = paste(ubase, menURLs, sep = "")
urls[1:3]
menTables = lapply(urls, extractResTable)
url
menURLs =
c("/results/1999/cb99m.htm", "cb003m.htm", "results/2001/oof_m.html",
"results/2002/oofm.htm", "results/2003/CB03-M.HTM",
"results/2004/men.htm", "results/2005/CB05-M.htm",
"results/2006/men.htm", "results/2007/men.htm",
"results/2008/men.htm", "results/2009/09cucb-M.htm",
"results/2010/2010cucb10m-m.htm",
"results/2011/2011cucb10m-m.htm",
"results/2012/2012cucb10m-m.htm")
# Recreate urls for Men's race results
urls = paste(ubase, menURLs, sep = "")
# Manually created list of urls(minus ubase) for Mens Results for 1999:2012
# Note: Fixed errors from textbook code for 1999
menURLs =
c("results/1999/cb99m.htm", "cb003m.htm", "results/2001/oof_m.html",
"results/2002/oofm.htm", "results/2003/CB03-M.HTM",
"results/2004/men.htm", "results/2005/CB05-M.htm",
"results/2006/men.htm", "results/2007/men.htm",
"results/2008/men.htm", "results/2009/09cucb-M.htm",
"results/2010/2010cucb10m-m.htm",
"results/2011/2011cucb10m-m.htm",
"results/2012/2012cucb10m-m.htm")
# Recreate urls for Men's race results
urls = paste(ubase, menURLs, sep = "")
menTables = lapply(urls, extractResTable)
url
# Manually created list of urls(minus ubase) for Mens Results for 1999:2012
# Note: Fixed errors from textbook code for 1999
menURLs =
c("results/1999/cb99m.html", "cb003m.htm", "results/2001/oof_m.html",
"results/2002/oofm.htm", "results/2003/CB03-M.HTM",
"results/2004/men.htm", "results/2005/CB05-M.htm",
"results/2006/men.htm", "results/2007/men.htm",
"results/2008/men.htm", "results/2009/09cucb-M.htm",
"results/2010/2010cucb10m-m.htm",
"results/2011/2011cucb10m-m.htm",
"results/2012/2012cucb10m-m.htm")
# Recreate urls for Men's race results
urls = paste(ubase, menURLs, sep = "")
menTables = lapply(urls, extractResTable)
url
menURLs =
c("results/1999/cb99m.html", "results/2000/Cb003m.htm", "results/2001/oof_m.html",
"results/2002/oofm.htm", "results/2003/CB03-M.HTM",
"results/2004/men.htm", "results/2005/CB05-M.htm",
"results/2006/men.htm", "results/2007/men.htm",
"results/2008/men.htm", "results/2009/09cucb-M.htm",
"results/2010/2010cucb10m-m.htm",
"results/2011/2011cucb10m-m.htm",
"results/2012/2012cucb10m-m.htm")
# Recreate urls for Men's race results
urls = paste(ubase, menURLs, sep = "")
menTables = lapply(urls, extractResTable)
names(menTables) = 1999:2012
typeof(menTables[[2]])
typeof(menTables[2])
typeof(menTables)
sapply(menTables, length)
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
}
else {
preNode = getNodeSet(doc, "//pre")
txt = xmlValue(preNode[[1]])
}
els = strsplit(txt, "\r\n")[[1]]
return(els)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000 or year == 2009) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000 || year == 2009) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
}
else {
preNode = getNodeSet(doc, "//pre")
txt = xmlValue(preNode[[1]])
}
els = strsplit(txt, "\r\n")[[1]]
return(els)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
url
0
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
doctmp = htmlParse("http://www.cherryblossom.org/results/1999/cb99m.html")
ffx = getNodeSet(doctmp, "//font")
ffx
ffx = getNodeSet(doctmp, "//PRE")
ffx = getNodeSet(doctmp, "/PRE")
ffx = getNodeSet(doctmp, "<PRE>")
ffx = getNodeSet(doctmp, "//font")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[3]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
ffx = getNodeSet(doctmp, "//td")
ffx = getNodeSet(doctmp, "//br")
ffx = getNodeSet(doctmp, "//td")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//td")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
menTables[1]
ffx = getNodeSet(doctmp, "//body")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
0
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
install.packages('IRkernel')
gen.arma.wge(1000)
library(tswge)
gen.arma.wge(1000)
parzen.wge(gen.arma.wge(1000))
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
# Setting the current working directory to the current file location
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
# Load Data set
data("fig1.21a")
# Plotting realization for reference
plotts.wge(fig1.21a)
# Plotting acf and spectral density estimate
plotts.sample.wge(fig1.21a)
# Find the Parzen spectral density estimate for a realization with M=31 (displayed in dB)
parzen.wge(fig1.21a,trunc = 31)
par(mfrow=1,1)
parzen.wge(fig1.21a,trunc = 31)
dev.off()
parzen.wge(fig1.21a,trunc = 31)
parzen.wge(fig1.21a,trunc = 31,dbcalc = FALSE)
x = gen.sigplusnoise.wge(n=100,coef = c(1,0),freq = c(.13,0),vara = 1)
x
parzen.wge(x)
x = gen.sigplusnoise.wge(n=100,coef = c(1,0),freq = c(.13,0),vara = 1,sn=8)
x
parzen.wge(x)
x = gen.sigplusnoise.wge(n=100,coef = c(1,1),freq = c(.13,.39),vara = 1,sn=8)
x
parzen.wge(x)
x = gen.sigplusnoise.wge(n=100,coef = c(1,1),freq = c(.13,.39),vara = 1,sn=9)
parzen.wge(x)
x = gen.sigplusnoise.wge(n=100,coef = c(1,1),freq = c(.13,.39),vara = 1,sn=20)
parzen.wge(x)
x = gen.sigplusnoise.wge(n=100,coef = c(1,1),freq = c(.13,.39),vara = 1,sn=8)
parzen.wge(x)
ma = stats::filter(x,rep(1,5))/5)
ma = stats::filter(x,rep(1,5))/5
plot(ma, type='l')
dif = diff(x,lag = 1)
plot(dif,type='l')
parzen.wge(dif)
x = read.csv(file.choose(),header=FALSE)
View(x)
x = read.csv(file.choose(),header=TRUE)
plotts.wge(x$x)
parzen.wge(x$x)
ma = stats::filter(x$x,rep(1,5))/5
plot(ma, type='l')
ma = stats::filter(ts(x$x),rep(1,5))/5
plot(ma, type='l')
ma <- na.omit(ma, inplace=TRUE)
parzen.wge(ma)
dif = diff(x$x,lag = 1)
plot(dif,type='l')
parzen.wge(dif)
xx = butterworth.wge(x$x, type='low',cutoff = 0.45)
parzen.wge(xx$x, trunc = 50)
par(mfrow = c(1,1))
xx = butterworth.wge(x$x, type='low',cutoff = 0.45)
parzen.wge(xx$x, trunc = 50)
x = gen.sigplusnoise.wge(n=100,coef = c(1,0),freq = c(.8,0),vara = 1,sn=8)
