"results/2004/men.htm", "results/2005/CB05-M.htm",
"results/2006/men.htm", "results/2007/men.htm",
"results/2008/men.htm", "results/2009/09cucb-M.htm",
"results/2010/2010cucb10m-m.htm",
"results/2011/2011cucb10m-m.htm",
"results/2012/2012cucb10m-m.htm")
# Recreate urls for Men's race results
urls = paste(ubase, menURLs, sep = "")
menTables = lapply(urls, extractResTable)
names(menTables) = 1999:2012
typeof(menTables[[2]])
typeof(menTables[2])
typeof(menTables)
sapply(menTables, length)
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
}
else {
preNode = getNodeSet(doc, "//pre")
txt = xmlValue(preNode[[1]])
}
els = strsplit(txt, "\r\n")[[1]]
return(els)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000 or year == 2009) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000 || year == 2009) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
}
else {
preNode = getNodeSet(doc, "//pre")
txt = xmlValue(preNode[[1]])
}
els = strsplit(txt, "\r\n")[[1]]
return(els)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
url
0
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
doctmp = htmlParse("http://www.cherryblossom.org/results/1999/cb99m.html")
ffx = getNodeSet(doctmp, "//font")
ffx
ffx = getNodeSet(doctmp, "//PRE")
ffx = getNodeSet(doctmp, "/PRE")
ffx = getNodeSet(doctmp, "<PRE>")
ffx = getNodeSet(doctmp, "//font")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[3]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
ffx = getNodeSet(doctmp, "//td")
ffx = getNodeSet(doctmp, "//br")
ffx = getNodeSet(doctmp, "//td")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//td")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
menTables[1]
menTables[1]
ffx = getNodeSet(doctmp, "//body")
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
0
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[2]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
gg = getNodeSet(doc, "//body")
txt = xmlValue(gg[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
# Write the lines as a text file.
writeLines(els, con = file)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
install.packages('IRkernel')
gen.arma.wge(1000)
library(tswge)
gen.arma.wge(1000)
parzen.wge(gen.arma.wge(1000))
x = gen.arma.wge(200, phi=c(.2, .48))
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
# Setting the current working directory to the current file location
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
# Section / Async Video 4.5.2 Behavior-Case 1: Two Real Roots / Slides 39,40
# Xt - 0.2X_t-1 - .48X_t-2 One Positive One Negative Roots
x = gen.arma.wge(200, phi=c(.2, .48))
plotts.sample.wge(x)
plotts.true.wge(phi = c(.2,.48)) # True spectral density
x = gen.arma.wge(200, phi=c(1.4, -.48))
plotts.sample.wge(x)
x = gen.arma.wge(200, phi=c(-1.4, -.48))
plotts.sample.wge(x)
plotts.true.wge(phi = c(-1.4,-.48)) # True spectral density
plotts.sample.wge(x)
# Async Problem 4.5.3,4,5,6
x = gen.arma.wge(100, phi=c(-.4,-.5))
plotts.sample.wge(x)
x = gen.arma.wge(100, phi=c(-.9,-.2))
plotts.sample.wge(x)
x = gen.arma.wge(200, phi=c(1.6, -.8))
plotts.sample.wge(x)
x = gen.arma.wge(100, phi=c(1.6, -.8))
plotts.sample.wge(x)
plotts.true.wge(phi = c(1.4,-.8))
data("lynx")
plotts.wge(lynx)
plotts.sample.wge(lynx)
data("llynx")
plotts.sample.wge(llynx)
factor.wge(phi=c(1.95,-1.85,0.855))
plotts.true.wge(phi=c(1.95,-1.85,0.855))
factor.wge(phi=c(1.59,-0.544,-0.511,0.222))
factor.wge(phi=c(1.95,-1.85,0.855))
plotts.true.wge(phi=c(1.95,-1.85,0.855))
factor.wge(phi=c(0.2,1.23,-0.26,-0.66))
plotts.true.wge(phi=c(0.2,1.23,-0.26,-0.66))
factor.wge(phi=c(1.0,0.5,-0.8,0.7))
plotts.true.wge(phi=c(1.0,0.5,-0.8,0.7)) # Non-Stationary
plotts.true.wge(phi=c(1.0,0.5,-0.8,0.7)) # Non-Stationary
# Async Problem 4.10.4
factor.wge(phi=c(-0.59,-0.544,-0.511,-0.222))
plotts.true.wge(phi=c(-0.59,-0.544,-0.511,-0.222))
factor.wge(phi=c(-0.50,-0.6))
plotts.true.wge(phi=c(-0.50,-0.6))
plotts.true.wge(phi=c(-0.50,-0.6))
factor.wge(phi=c(-0.50,-0.6))
plotts.true.wge(phi=c(-0.50,-0.6))
library(tswge)
# https://cran.r-project.org/web/packages/tswge/tswge.pdf
library(dplyr)
library(tidyr)
library(stats)
# Setting the current working directory to the current file location
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
#Walmart Store 9 Item 50 Filtering / spectral analysis / AR(3)
# Read in the data
Walmart = read.csv(file.choose(),header = TRUE)
# Load the Data
Stor9Item50 = Walmart %>% filter(item == 50 & store == 9) #1826 obs 5 variables
head(Stor9Item50)
plotts.wge(Stor9Item50$sales)
factor.wge(n=len(Stor9Item50),phi=c(0.967))
factor.wge(phi=c(0.967))
plotts.true.wge(n=len(Store9Item50),phi=c(0.967))
plotts.true.wge(n=length(Store9Item50),phi=c(0.967))
length(Store9Item50)
plotts.true.wge(n=length(Stor9Item50),phi=c(0.967))
length(Stor9Item50$sales
)
plotts.true.wge(n=length(Stor9Item50$sales),phi=c(0.967))
plotts.true.wge(Stor9Item50$sales)
plotts.sample.wge(Stor9Item50$sales)
plotts.wge(Stor9Item50$sales)
plotts.sample.wge(Stor9Item50$sales)
factor.wge(phi=c(0.967))
plotts.true.wge(n=length(Stor9Item50$sales),phi=c(0.967))
factor.wge(phi=c(1.452,-0.453,-0.294,0.175,0.237,-0.154))
plotts.true.wge(n=length(Stor9Item50$sales),phi=c(1.452,-0.453,-0.294,0.175,0.237,-0.154))
factor.wge(phi=c(1.445,-0.411,-0.038,0.170,0.362,-0.245,-0.177,0.213))
plotts.true.wge(n=length(Stor9Item50$sales),phi=c(1.445,-0.411,-0.038,0.170,0.362,-0.245,-0.177,0.213))
factor.wge(phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.true.wge(n=length(Stor9Item50$sales),phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.true.wge(n=length(Stor9Item50$sales),phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.true.wge(n=length(Stor9Item50$sales),phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
mean(Stor9Item50)
mean(Stor9Item50$sales)
Stor9Item50$ZM_sales = Stor9Item50$sales-mean(Stor9Item50$sales)
View(Stor9Item50)
mean(Stor9Item50$sales)
plotts.sample.wge(Stor9Item50$ZM_sales)
plotts.sample.wge(Stor9Item50$sales)
plotts.true.wge(n=length(Stor9Item50$sales),phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.true.wge(phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.true.wge(phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.true.wge(phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.true.wge(phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.sample.wge(n=250,phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.sample.wge(phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
x = gen.arma.wge(n=250,phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.sample.wge(x)
x = gen.arma.wge(n=length(Stor9Item50$sales),phi=c(1.384,-0.359,-0.309,0.063,0.317,-0.140,-0.0587,-0.199,0.2877))
plotts.sample.wge(x)
# Zero Mean Data Visualization
Stor9Item50$ZM_sales = Stor9Item50$sales-mean(Stor9Item50$sales)
plotts.sample.wge(Stor9Item50$ZM_sales)
